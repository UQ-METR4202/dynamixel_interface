#  This file is used to configure the paramters used to control the servos.
#  This is an example only. To use the controller define a new controller_config.yaml
#  in your ros package along with a new launch file and use those. see the readme for
#  more info.

# # --------------------------------------------------------------------------- # #
# GLOBAL OPERATION PARAMETERS
loop_rate: 100                 # desired rate for joint state updates. actual rate may be less depending on number
                                  # of dynamixels connected and port baud rate.
control_mode: position            # control mode, either 'position', 'velocity', or 'effort'
disable_torque_on_shutdown: true  # with this enabled the motors will switch off when the controller closes
echo_joint_commands: true         # debug flag to echo write commands sent to the controller, useful for measuring
                                  # write rates
ignore_input_velocity: false      # ignore input velocity commands in position mode (no profile velocity)
diagnostics_rate: 1               # rate to publish diagnostic information
dataport_rate: 1                  # rate to read from dynamixel external dataports

# The below values are used as global defaults and are applied for each servo unless overridden in the entry for
# the servo below
global_joint_speed: 5.0           # maximum joint speed (rad/s) (in position or velocity control)
global_torque_limit: 1.0          # maximum motor torque for all modes, given as a fraction of rated max (0-1)

# # --------------------------------------------------------------------------- # #
# PORT AND SERVO CONFIGURATIONS
ports:

  # PORT LIST
  - name: Port_1               # name for this port in config
    device: /dev/ttyUSB0       # serial device this port will communicate on
    baudrate: 3000000          # baudrate in use (see dynamixel_driver.h for valid values)
    use_legacy_protocol: false # motor protocol in use, must be "1.0", "2.0", or "PRO"
    group_read_enabled: true   # specify whether to use group comms (MUCH faster) for reading/writing (for more
    group_write_enabled: true  # info refer to the bulk/sync read/write in the dynamixel communications protocols)
    servos:

        # SERVO LIST FOR THIS PORT
        - id: 1               # (ID set in servo eeprom, must be unique on this port)
          joint_name: joint_1 # (MUST BE UNIQUE ACROSS ALL PORTS)
          init: 2048          # initial (0 rad) servo position (in raw encoder count)
          min: 0              # minimum servo position (in raw encoder count)
          max: 4095           # maximum servo position, Note when MIN > MAX ROTATION IS REVERSED

        - id: 2
          joint_name: joint_2
          init: 2048
          min: 0
          max: 4095

        - id: 3
          joint_name: joint_3
          init: 2048
          min: 0
          max: 4095


# --------------------------------------------------------------------------- # #
